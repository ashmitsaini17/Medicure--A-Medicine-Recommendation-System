# -*- coding: utf-8 -*-
"""Medicine Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11TZk7KM-gu1oV46a0JVKOuOqFeHAZ-vy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import plotly.graph_objects as go
import plotly.offline as py
import plotly.express as px
import glob
import os

medicine_df=pd.read_excel("/content/Medicine_description.xlsx")
medicine_df.head()

medicine_df.info()

medicine_df.describe()

medicine_df.isnull().sum()

medicine_df=medicine_df.dropna()
medicine_df.isnull().sum()

print(f'Dataset has {len(medicine_df.Reason.unique())} unique groups of various reasons')
print('*'*20)
print(f'And the top 20 Reasons are :')
print(medicine_df.Reason.value_counts().head(20))
print('*'*20)

c = medicine_df.Reason.value_counts().head(10)
fig, ax = plt.subplots(1,1,figsize=(12,6))
plt.title("Top 10 Reasons")
ax.bar(c.index, c.values, width=0.8, color='b')
plt.xticks(rotation=45)

print(f'Dataset has {len(medicine_df.Drug_Name.unique())} unique groups')
print('*'*20)
print(f'And the top 10 Unique Drug Names are :')
print(medicine_df.Drug_Name.value_counts().head(10))
print('*'*20)

c = medicine_df.Drug_Name.value_counts().head(10)
fig, ax = plt.subplots(1,1,figsize=(12,6))
plt.title("Top 10 unique Drug names")
ax.bar(c.index, c.values, width=0.8, color='y')
plt.xticks(rotation=45)

print(f'Dataset has {len(medicine_df.Description.unique())} unique names')
print('*'*20)
print(f'And the top 10 counts are :')
print(medicine_df.value_counts().head(10))
print('*'*20)

c = medicine_df.Description.value_counts().head(10)
fig, ax = plt.subplots(1,1,figsize=(12,6))
plt.title("Top 10 Unique Description")
ax.bar(c.index, c.values, width=0.8, color='b')
plt.xticks(rotation=45, ha='right')

unique_df = pd.DataFrame()
unique_df['Features'] = medicine_df.columns
unique=[]
for i in medicine_df.columns:
    unique.append(medicine_df[i].nunique())
unique_df['Uniques'] = unique
f, ax = plt.subplots(1,1, figsize=(15,7))
splot = sns.barplot(x=unique_df['Features'], y=unique_df['Uniques'], alpha=0.8)
for p in splot.patches:
    splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center',
                   va = 'center', xytext = (0, 9), textcoords = 'offset points')
plt.title('Bar plot for number of unique values in each column',weight='bold', size=15)
plt.ylabel('#Unique values', size=12, weight='bold')
plt.xlabel('Features', size=12, weight='bold')
plt.xticks(rotation=90)
plt.show()

#word cloud
from wordcloud import WordCloud, ImageColorGenerator
text = " ".join(str(each) for each in medicine_df.Reason)
# Create and generate a word cloud image:
wordcloud = WordCloud(max_words=200,colormap='Reds', background_color="black").generate(text)
plt.figure(figsize=(10,6))
plt.figure(figsize=(15,10))
# Display the generated image:
plt.imshow(wordcloud, interpolation='Bilinear')
plt.axis("off")
plt.figure(1,figsize=(12, 12))
plt.show()

rating_df=pd.read_excel("/content/Ratings.xlsx")
rating_df.head()

rating_df = rating_df.rename(columns={'Short-form':'form'})

top_medicine = rating_df.sort_values(by='Rating', ascending=False)[:20]
figure = plt.figure(figsize=(10,6))
sns.barplot(y=top_medicine.form, x=top_medicine.Rating, color='green')
plt.xticks()
plt.xlabel('Medicine Rating')
plt.ylabel('Short-form')
plt.title('20 Medicines by Rating')
plt.show()

company_df = pd.read_excel("/content/Company_Name.xlsx")
company_df.head()

company_df.columns.tolist()

text_cols = ['Company_Name','NSE_Symbol', 'Industry']

from wordcloud import WordCloud, STOPWORDS

wc = WordCloud(stopwords = set(list(STOPWORDS) + ['|']), random_state = 42)
fig, axes = plt.subplots(2, 2, figsize=(20, 12))
axes = [ax for axes_row in axes for ax in axes_row]

for i, c in enumerate(text_cols):
  op = wc.generate(str(company_df[c]))
  _ = axes[i].imshow(op)
  _ = axes[i].set_title(c.upper(), fontsize=24)
  _ = axes[i].axis('off')

_ = fig.delaxes(axes[3])

s = (company_df.isna().sum()/company_df.shape[0]*100)<50
df2_modified = company_df[s.index[s].tolist()]
print (df2_modified.shape)
df2_modified.head()

import math
plt.rcParams['font.size']=14
fig, ax = plt.subplots(2,2, figsize=(20,20))
for col, ax in zip(['Company_Name','NSE_Symbol','Rating', 'Industry'], ax.flat):
    dict_ = df2_modified[col].value_counts().head(10).to_dict()
    if ('Not Available' in dict_.keys()):
        dict_.pop('Not Available')
    labels = []
    for i in dict_.keys():
        i = i.split(' ')
        if (len(i) > 6):
            i[math.ceil(len(i)/2)-1] += '\n'
            labels.append(' '.join(i))
        else:
            labels.append(' '.join(i))
    ax.pie(x=list(dict_.values()), labels=labels, shadow=True, startangle=0)
    col_title = (' '.join(col.split('_'))).upper()
    ax.set_title(col_title, weight='bold', fontsize=18)
plt.tight_layout()
plt.show()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

rating_df.rename(columns={'form': 'Rating_Code', 'Rating': 'Numerical_Rating'}, inplace=True)
company_df.rename(columns={'Rating': 'Rating_Code'}, inplace=True)
merged_company_ratings_df = pd.merge(company_df, rating_df, on='Rating_Code')

"""Creating a Combined Feature for this Model
and, handing any potential missing values in the text.
"""

medicine_df['combined_features'] = medicine_df['Reason'] + ' ' + medicine_df['Description']
medicine_df['combined_features'].fillna('', inplace=True)

"""## Feature Engineering

Create a TF-IDF Vectorizer to convert text to numbers
"""

tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(medicine_df['combined_features'])

"""# Building the Recommendation function"""

# --- Step 3: Building the Recommendation Function ---
def recommend_medicines(reason, top_n=10):
    """Recommends medicines based on a user's reason."""
    # Create a TF-IDF vector for the input reason
    reason_vector = tfidf_vectorizer.transform([reason])

    # Calculate cosine similarity between the reason and all medicines
    cosine_similarities = cosine_similarity(reason_vector, tfidf_matrix).flatten()

    # Get the indices of the top_n most similar medicines
    top_indices = cosine_similarities.argsort()[-top_n:][::-1]

    # Get the details of the top medicines
    recommendations = medicine_df.loc[top_indices].copy()

    # For demonstration, we'll add some dummy ratings since we can't link companies perfectly
    # In a full system, you'd merge this with your `final_df`
    # Let's add dummy ratings for now
    recommendations['Company_Rating'] = [4.5, 4.8, 4.2, 4.9, 3.8, 4.5, 4.1, 4.7, 4.3, 4.6]

    # Sort the recommendations by rating
    recommendations = recommendations.sort_values(by='Company_Rating', ascending=False)
    return recommendations[['Drug_Name', 'Reason','Company_Rating']]

"""# Getting Recommendations....."""

# Recommendations for 'Acne'
acne_recommendations = recommend_medicines('Acne', top_n=10)
print("--- Top 10 Recommendations for Acne ---")
print(acne_recommendations)

# Recommendations for 'Pain relief'
pain_recommendations = recommend_medicines('Pain relief', top_n=10)
#print("\n--- Top 10 Recommendations for Pain Relief ---")
print("--- Top 10 Recommendations for Pain Relief ---")
print(pain_recommendations)

"""# Doing the Analysis with the BERT Model"""

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer, util

"""# Loading the Sentence-BERT Model"""

# We use a pre-trained model that is excellent for semantic search
print("\nLoading the Sentence-BERT model... (This may take a moment)")
model = SentenceTransformer('all-MiniLM-L6-v2')
print("Model loaded.")

"""# Creating Medicine Embeddings
### This step converts each medicine's description into a vector.
"""

# --- Step 3: Create Medicine Embeddings ---
# This step converts each medicine's description into a vector.
print("\nCreating embeddings for all medicines... (This is a one-time process)")
medicine_embeddings = model.encode(medicine_df['combined_features'].tolist(), convert_to_tensor=True)
print(f"Successfully created {len(medicine_embeddings)} embeddings.")

"""# Building the Recommendation Function"""

def recommend_medicines_advanced(reason, top_n=10):
    """Recommends medicines using Sentence-BERT embeddings."""

    # 1. Encode the user's reason into a vector
    reason_embedding = model.encode(reason, convert_to_tensor=True)

    # 2. Use semantic search to find the most similar medicines
    # This is much faster than calculating cosine similarity manually
    hits = util.semantic_search(reason_embedding, medicine_embeddings, top_k=top_n)

    # The result is a list of lists, so we take the first element
    hits = hits[0]

    # 3. Get the indices of the recommended medicines
    top_indices = [hit['corpus_id'] for hit in hits]

    # 4. Retrieve the details of the top medicines
    recommendations = medicine_df.iloc[top_indices].copy()

    # For now, we'll assign some plausible ratings for ranking.
    recommendations['Company_Rating'] = [hit['score'] * 5 for hit in hits] # Use similarity score as a proxy
    recommendations = recommendations.sort_values(by='Company_Rating', ascending=False)

    return recommendations[['Drug_Name', 'Reason', 'Description', 'Company_Rating']]

# Example 1: Get recommendations for 'Fungal infection'
fungal_recommendations = recommend_medicines_advanced('Fungal skin infection')
print("\n--- Top Recommendations for 'Fungal skin infection' ---")
print(fungal_recommendations)
# Example 2: Get recommendations for 'headache and fever'
pain_recommendations = recommend_medicines_advanced('sore throat and headache')
print("\n--- Top Recommendations for 'sore throat and headache' ---")
print(pain_recommendations)

pip install streamlit-extras

"""# Deploying the ML model using Streamlit"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# from sentence_transformers import SentenceTransformer, util
# 
# # ---------- CONFIG ----------
# st.set_page_config(page_title="MediGuide", page_icon="💊", layout="wide")
# LOGO_PATH = "/content/ChatGPT Image Aug 16, 2025, 09_33_51 AM.png"
# DATA_PATH = "Medicine_description.xlsx"
# 
# # ---------- INITIALIZE SESSION STATE ----------
# if 'page' not in st.session_state:
#     st.session_state.page = 'Home'
# 
# # ---------- THEME / CSS ----------
# st.markdown("""
# <style>
# /* App background: soft healthcare gradient */
# .stApp {
#   min-height: 100vh;
#   background: linear-gradient(180deg, #f3fbff 0%, #ffffff 45%, #eaf5ff 100%);
# }
# 
# /* Layout width */
# .block-container { max-width: 1100px; padding-top: 1rem; }
# 
# /* --- Navigation Bar --- */
# .nav-container {
#     display: flex;
#     justify-content: center; /* Center the links */
#     align-items: center;
#     padding: 1rem 0;
#     margin-bottom: 2rem;
#     border-bottom: 1px solid #e5e7eb;
#     border-top: 1px solid #e5e7eb; /* Added top border for style */
# }
# a.nav-link {
#     font-size: 17px;
#     font-weight: 600;
#     color: #475569;
#     margin: 0 20px; /* Adjusted margin for centered look */
#     text-decoration: none;
#     transition: color 0.3s, border-bottom 0.3s;
#     padding-bottom: 5px;
#     border-bottom: 2px solid transparent;
# }
# a.nav-link:hover {
#     color: #004aad;
# }
# a.nav-link.active {
#     color: #004aad;
#     border-bottom: 2px solid #004aad;
# }
# 
# /* Generic Section container */
# .section-container {
#     padding: 2rem;
#     background: #ffffff;
#     border-radius: 16px;
#     box-shadow: 0 4px 16px rgba(15, 23, 42, 0.06);
# }
# 
# /* Headings + text colors */
# h1, h2, h3, h4, h5, h6 { color: #0b1320; }
# p, span, label, div { color: #1f2937; }
# 
# 
# 
# /* Hero styling */
# .hero-title { font-size: 44px; font-weight: 800; line-height: 1.1; margin: 8px 0 4px 0; text-align: center; color: #004aad; }
# .hero-tagline { font-size: 18px; color: #475569; margin-top: 4px; text-align: center; }
# .section-title { font-size: 32px; font-weight: 700; margin: 20px 0 12px 0; }
# 
# /* Input */
# div[data-baseweb="input"] > div { border-radius: 14px !important; border: 1px solid #dbe7ff !important; box-shadow: 0 1px 2px rgba(0,0,0,0.04); background-color: #ffffff !important; }
# input[type="text"] { padding: 14px 16px !important; font-size: 16px !important; color: #000000 !important; }
# 
# /* Main "Get Recommendations" Button */
# .stButton > button { width: 100%; padding: 14px 18px; border-radius: 14px; background: #1e66ff; color: white; font-weight: 700; font-size: 18px; border: 0; box-shadow: 0 2px 6px rgba(30,102,255,0.25); }
# .stButton > button:hover { filter: brightness(0.95); }
# 
# /* Recommendation card */
# .med-card { background: #ffffff; border: 1px solid #e9efff; border-radius: 16px; padding: 18px; box-shadow: 0 4px 16px rgba(15, 23, 42, 0.06); margin-bottom: 18px; }
# .med-title { color: #0c4aef; font-size: 22px; font-weight: 800; margin: 0 0 8px 0; }
# .med-reason { font-size: 18px; margin: 0 0 4px 0; color: #0b1320; }
# .med-desc { color: #5b6573; margin: 0 0 10px 0; }
# .med-score { color: #0f9d58; font-weight: 700; }
# </style>
# """, unsafe_allow_html=True)
# 
# 
# # ---------- MODEL & DATA (Loaded only once) ----------
# @st.cache_resource
# def load_model():
#     return SentenceTransformer('all-MiniLM-L6-v2')
# @st.cache_data
# def load_and_prepare_data(path: str):
#     df = pd.read_excel(path)
#     df['Reason'] = df['Reason'].fillna('')
#     df['Description'] = df['Description'].fillna('')
#     df['combined_features'] = df['Reason'] + '. ' + df['Description']
#     return df
# @st.cache_data
# def create_embeddings(_df, _model):
#     return _model.encode(_df['combined_features'].tolist(), convert_to_tensor=True)
# 
# model = load_model()
# medicine_df = load_and_prepare_data(DATA_PATH)
# medicine_embeddings = create_embeddings(medicine_df, model)
# 
# # ---------- HERO SECTION (LOGO AND TITLE) ----------
# st.image(LOGO_PATH, width=250)
# st.markdown('<div class="hero-title">💊MediGuide</div>', unsafe_allow_html=True)
# st.markdown('<div class="hero-tagline">Smart AI-powered guidance for medicines and health concerns</div>', unsafe_allow_html=True)
# 
# 
# # ---------- PAGE CONTENT ROUTING ----------
# 
# # --- (MOVED) NAVIGATION BAR ---
# st.session_state.page = st.query_params.get('page', 'Home')
# home_class = "active" if st.session_state.page == 'Home' else ""
# how_class = "active" if st.session_state.page == 'How it works' else ""
# about_class = "active" if st.session_state.page == 'About' else ""
# contact_class = "active" if st.session_state.page == 'Contact' else ""
# 
# st.markdown(f"""
# <div class="nav-container">
#     <a class="nav-link {home_class}" href="?page=Home">Home</a>
#     <a class="nav-link {how_class}" href="?page=How+it+works">How it works</a>
#     <a class="nav-link {about_class}" href="?page=About">About</a>
#     <a class="nav-link {contact_class}" href="?page=Contact">Contact</a>
# </div>
# """, unsafe_allow_html=True)
# 
# 
# # --- HOME PAGE CONTENT ---
# if st.session_state.page == 'Home':
#     st.markdown('<div class="section-title">🔎 Enter your health concern</div>', unsafe_allow_html=True)
#     placeholder = "e.g., fever, headache, sore throat"
#     user_input = st.text_input("", value="", placeholder=placeholder, label_visibility="collapsed")
#     go = st.button("Get Recommendations")
# 
#     if go:
#         if not user_input.strip():
#             st.warning("Please enter a health concern.")
#         else:
#             query_embedding = model.encode(user_input, convert_to_tensor=True)
#             hits = util.semantic_search(query_embedding, medicine_embeddings, top_k=6)[0]
#             top_indices = [h['corpus_id'] for h in hits]
#             recs = medicine_df.iloc[top_indices].copy()
#             recs['Similarity_Score'] = [h['score'] for h in hits]
#             st.markdown("### Here are your top recommendations:")
#             cols = st.columns(2)
#             for i, (_, row) in enumerate(recs.iterrows()):
#                 with cols[i % 2]:
#                     st.markdown(f"""
#                     <div class="med-card">
#                         <div class="med-title">{row.get('Drug_Name','Unknown')}</div>
#                         <div class="med-reason">{row.get('Reason','')}</div>
#                         <div class="med-desc">{row.get('Description','')}</div>
#                         <div class="med-score">Match Score: {row['Similarity_Score']:.2f}</div>
#                     </div>""", unsafe_allow_html=True)
# 
# # --- HOW IT WORKS PAGE ---
# elif st.session_state.page == 'How it works':
#     st.markdown('<div class="section-container">', unsafe_allow_html=True)
#     st.header("How MediGuide Works ⚙️")
#     st.write("---")
#     st.subheader("Step 1: Describe Your Symptoms")
#     st.write("Navigate to the **Home** page and use the search bar to enter your health symptoms or the name of a medicine you have a question about.")
#     st.subheader("Step 2: AI Analysis")
#     st.write("Our smart AI model instantly analyzes your input. It uses semantic search to compare your query against a vast database of medicine information to find the most relevant matches.")
#     st.subheader("Step 3: Get Guidance")
#     st.write("Receive a ranked list of medicine recommendations, complete with descriptions and reasons for their use. **Disclaimer:** This is not a substitute for professional medical advice. Always consult a healthcare provider.")
#     st.markdown('</div>', unsafe_allow_html=True)
# 
# # --- ABOUT PAGE ---
# elif st.session_state.page == 'About':
#     st.markdown('<div class="section-container">', unsafe_allow_html=True)
#     st.header("About MediGuide ℹ️")
#     st.write("---")
#     st.subheader("What is MediGuide?")
#     st.write("""
#     **MediGuide** is an intelligent, AI-powered application designed to provide instant guidance on medicines and health concerns.
#     By leveraging advanced semantic search technology, MediGuide helps you quickly find relevant information based on your symptoms or queries.
#     """)
#     st.subheader("Our Mission")
#     st.write("""
#     Our mission is to make health and medicine information more accessible and understandable. We aim to empower users to make more informed decisions by providing clear, AI-driven insights. MediGuide serves as a helpful first step in your health journey.
#     """)
#     st.subheader("Technology")
#     st.write("""
#     This app is built with **Python** and **Streamlit**, utilizing the **Sentence-Transformers** library to understand and process user queries effectively. It's a demonstration of how modern AI can simplify access to complex information.
#     """)
#     st.markdown('</div>', unsafe_allow_html=True)
# 
# # --- CONTACT PAGE ---
# elif st.session_state.page == 'Contact':
#     st.markdown('<div class="section-container">', unsafe_allow_html=True)
#     st.header("Contact Information 📧")
#     st.write("---")
#     st.write("Feel free to reach out for collaborations or inquiries.")
#     st.write(f"**Name**: Ashmit Saini")
#     st.write(f"**Email**: ashmitsaini0511@gmail.com")
#     st.write(f"**Phone**: +917417676876")
#     st.write(f"**Location**: New Delhi")
#     st.markdown("""
#         <p style="margin-top:1rem;">
#             <a href="https://www.linkedin.com/" target="_blank" style="margin-right: 15px; text-decoration:none; color: #0077B5; font-weight: bold;">LinkedIn</a> |
#             <a href="https://github.com/" target="_blank" style="margin-right: 15px; text-decoration:none; color: #333; font-weight: bold;">GitHub</a> |
#             <a href="#" target="_blank" style="text-decoration:none; color: #004aad; font-weight: bold;">Portfolio</a>
#         </p>
#     """, unsafe_allow_html=True)
#     st.markdown('</div>', unsafe_allow_html=True)

!pip install pyngrok
!ngrok authtoken 1neOH1zvdaTceJARPqljugmwOGs_3T9s6YsFJDcjhC7QdncW9
from pyngrok import ngrok
import os

# Make sure the app.py file exists before trying to run it
if not os.path.exists('app.py'):
    print("Error: app.py not found. Please be sure to run the '%%writefile app.py' cell above.")
else:
    # Terminate any existing ngrok tunnels
    ngrok.kill()

    # Start ngrok tunnel to expose Streamlit's default port (8501)
    public_url = ngrok.connect("8501")
    print("🚀 Your app is live!")
    print(f"Click the link to view: {public_url}")

    # Run the Streamlit app as a background process
    # This is a more stable way to run it in Colab
    !nohup streamlit run app.py &